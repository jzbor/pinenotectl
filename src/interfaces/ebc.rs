//! # D-Bus interface proxy for: `org.pinenote.ebc`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `pn-ebc-inspection.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "org.pinenote.ebc", default_path = "/ebc", default_service = "org.pinenote.ebc")]
pub trait Ebc {
    /// EnterWritingMode method
    fn enter_writing_mode(&self) -> zbus::Result<()>;

    /// GetAutoRefresh method
    fn get_auto_refresh(&self) -> zbus::Result<bool>;

    /// GetAutorefresh method
    fn get_autorefresh(&self) -> zbus::Result<bool>;

    /// GetBwDitherInvert method
    fn get_bw_dither_invert(&self) -> zbus::Result<bool>;

    /// GetBwMode method
    fn get_bw_mode(&self) -> zbus::Result<u8>;

    /// GetDclkSelect method
    fn get_dclk_select(&self) -> zbus::Result<u8>;

    /// GetDefaultWaveform method
    fn get_default_waveform(&self) -> zbus::Result<u8>;

    /// GetDelayA method
    fn get_delay_a(&self) -> zbus::Result<u32>;

    /// GetNoOffScreen method
    fn get_no_off_screen(&self) -> zbus::Result<bool>;

    /// GetSplitAreaLimit method
    fn get_split_area_limit(&self) -> zbus::Result<u32>;

    /// QuitWritingMode method
    fn quit_writing_mode(&self) -> zbus::Result<()>;

    /// RequestQualityOrPerformanceMode method
    fn request_quality_or_performance_mode(&self, mode_request: u8) -> zbus::Result<()>;

    /// SetAutoRefresh method
    fn set_auto_refresh(&self, state: bool) -> zbus::Result<()>;

    /// SetBwDitherInvert method
    fn set_bw_dither_invert(&self, new_mode: bool) -> zbus::Result<()>;

    /// SetBwMode method
    fn set_bw_mode(&self, new_mode: u8) -> zbus::Result<()>;

    /// SetDclkSelect method
    fn set_dclk_select(&self, state: u8) -> zbus::Result<()>;

    /// SetDefaultWaveform method
    fn set_default_waveform(&self, waveform: u8) -> zbus::Result<()>;

    /// SetDelayA method
    fn set_delay_a(&self, delay: u32) -> zbus::Result<()>;

    /// SetEBCParameters method
    #[zbus(name = "SetEBCParameters")]
    fn set_ebcparameters(&self, default_waveform: u8, bw_mode: u8) -> zbus::Result<()>;

    /// SetNoOffScreen method
    fn set_no_off_screen(&self, new_mode: bool) -> zbus::Result<()>;

    /// SetOfflineScreenFromFileTemporary method
    fn set_offline_screen_from_file_temporary(&self, filename: &str) -> zbus::Result<()>;

    /// SetSplitAreaLimit method
    fn set_split_area_limit(&self, split_limit: u32) -> zbus::Result<()>;

    /// TriggerGlobalRefresh method
    fn trigger_global_refresh(&self) -> zbus::Result<()>;

    /// AutoRefreshChanged signal
    #[zbus(signal)]
    fn auto_refresh_changed(&self) -> zbus::Result<()>;

    /// BwDitherInvertChanged signal
    #[zbus(signal)]
    fn bw_dither_invert_changed(&self) -> zbus::Result<()>;

    /// BwModeChanged signal
    #[zbus(signal)]
    fn bw_mode_changed(&self) -> zbus::Result<()>;

    /// DclkSelectChanged signal
    #[zbus(signal)]
    fn dclk_select_changed(&self) -> zbus::Result<()>;

    /// DelayAChanged signal
    #[zbus(signal, name = "DelayAChanged")]
    fn delay_achanged(&self) -> zbus::Result<()>;

    /// NoOffScreenChanged signal
    #[zbus(signal)]
    fn no_off_screen_changed(&self) -> zbus::Result<()>;

    /// RequestedQualityOrPerformance signal
    #[zbus(signal)]
    fn requested_quality_or_performance(&self, requested_mode: u8) -> zbus::Result<()>;

    /// SplitAreaLimitChanged signal
    #[zbus(signal)]
    fn split_area_limit_changed(&self) -> zbus::Result<()>;

    /// WaveformChanged signal
    #[zbus(signal)]
    fn waveform_changed(&self) -> zbus::Result<()>;

    /// default_waveform property
    #[zbus(property, name = "default_waveform")]
    fn default_waveform(&self) -> zbus::Result<u8>;
    // #[zbus(property, name = "default_waveform")]
    // fn set_default_waveform(&self, value: u8) -> zbus::Result<()>;
}
